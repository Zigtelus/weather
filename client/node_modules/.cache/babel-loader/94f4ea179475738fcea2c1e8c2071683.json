{"ast":null,"code":"// функция опредлеяющая время рассвета и заката по UNIX данным\nfunction sunriseSunset(sunriseUtc, sunsetUtc, timezone, nowTime) {\n  // получение часов (без минут) из UNIX формата\n  function getTimeUTC(timeSunrise) {\n    // UNIX формат побязательно умножить на 1000 для получения данных\n    const date = new Date(timeSunrise * 1000); // Получаем UTC время строкой\n\n    const utcHours = date.getUTCHours(); // Форматируем значение, чтобы добавить ведущий ноль, если часы < 10\n\n    const formattedHours = utcHours.toString().padStart(2, '0'); // часы в минуты обращаем\n\n    return Number(formattedHours);\n  }\n\n  ; // временная зона города, который показывает погоду\n  // из UTC формата получает часы \n\n  const isTimeZone = timezone / 60 / 60; // получаем нужное время с учетом временной зоны\n\n  const hours = time => {\n    let newTime = time; // добавляем или убавляем временную зону (+ на - дает -, а на + не меняется)\n\n    newTime += isTimeZone;\n\n    if (newTime < 0) {\n      newTime += 24;\n    } else if (newTime === 0) {\n      newTime = 24;\n    } else if (newTime > 24) {\n      newTime -= 24;\n    }\n\n    return newTime;\n  };\n\n  const timesUTC = {\n    sunrise: hours(getTimeUTC(sunriseUtc)),\n    sunset: hours(getTimeUTC(sunsetUtc)),\n    nowtime: getTimeUTC(nowTime + timezone)\n  };\n\n  if (timesUTC.sunset > timesUTC.nowtime === timesUTC.nowtime >= timesUTC.sunrise) {\n    return { ...timesUTC,\n      timesOfDay: 'light'\n    };\n  } else {\n    return { ...timesUTC,\n      timesOfDay: 'nieght'\n    };\n  }\n}\n\nexport { sunriseSunset };","map":{"version":3,"names":["sunriseSunset","sunriseUtc","sunsetUtc","timezone","nowTime","getTimeUTC","timeSunrise","date","Date","utcHours","getUTCHours","formattedHours","toString","padStart","Number","isTimeZone","hours","time","newTime","timesUTC","sunrise","sunset","nowtime","timesOfDay"],"sources":["/Users/gregory/Desktop/untitled folder 2/wwww/weather/client/src/helpers/sunriseSunset.ts"],"sourcesContent":["\n// функция опредлеяющая время рассвета и заката по UNIX данным\nfunction sunriseSunset(sunriseUtc: number, sunsetUtc: number, timezone: number, nowTime: number) {\n  \n  // получение часов (без минут) из UNIX формата\n  function getTimeUTC(timeSunrise: number) {\n\n    // UNIX формат побязательно умножить на 1000 для получения данных\n    const date = new Date(timeSunrise * 1000);\n    \n    // Получаем UTC время строкой\n    const utcHours = date.getUTCHours();\n    \n    // Форматируем значение, чтобы добавить ведущий ноль, если часы < 10\n    const formattedHours = utcHours.toString().padStart(2, '0');\n  \n    // часы в минуты обращаем\n    return Number(formattedHours)\n  };\n  \n\n  // временная зона города, который показывает погоду\n  // из UTC формата получает часы \n  const isTimeZone = timezone / 60 / 60\n\n\n  // получаем нужное время с учетом временной зоны\n  const hours = (time: number)=> {\n\n    let newTime = time\n\n    // добавляем или убавляем временную зону (+ на - дает -, а на + не меняется)\n    newTime += isTimeZone\n\n    if (newTime < 0) {\n      newTime += 24\n    } else if (newTime === 0) {\n      newTime = 24\n    } else if (newTime > 24) {\n      newTime -= 24\n    }\n\n    return newTime\n  }\n\n  const timesUTC = {\n    sunrise: hours(getTimeUTC(sunriseUtc)),\n    sunset: hours(getTimeUTC(sunsetUtc)),\n    nowtime: getTimeUTC(nowTime + timezone),\n  }\n\n  if ((timesUTC.sunset > timesUTC.nowtime) === (timesUTC.nowtime >= timesUTC.sunrise)) {\n    return {\n      ...timesUTC,\n      timesOfDay: 'light'\n    }\n  } else {\n    return {\n      ...timesUTC,\n      timesOfDay: 'nieght'\n    }\n  }\n\n}\n\nexport { sunriseSunset };"],"mappings":"AACA;AACA,SAASA,aAAT,CAAuBC,UAAvB,EAA2CC,SAA3C,EAA8DC,QAA9D,EAAgFC,OAAhF,EAAiG;EAE/F;EACA,SAASC,UAAT,CAAoBC,WAApB,EAAyC;IAEvC;IACA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,WAAW,GAAG,IAAvB,CAAb,CAHuC,CAKvC;;IACA,MAAMG,QAAQ,GAAGF,IAAI,CAACG,WAAL,EAAjB,CANuC,CAQvC;;IACA,MAAMC,cAAc,GAAGF,QAAQ,CAACG,QAAT,GAAoBC,QAApB,CAA6B,CAA7B,EAAgC,GAAhC,CAAvB,CATuC,CAWvC;;IACA,OAAOC,MAAM,CAACH,cAAD,CAAb;EACD;;EAAA,CAhB8F,CAmB/F;EACA;;EACA,MAAMI,UAAU,GAAGZ,QAAQ,GAAG,EAAX,GAAgB,EAAnC,CArB+F,CAwB/F;;EACA,MAAMa,KAAK,GAAIC,IAAD,IAAiB;IAE7B,IAAIC,OAAO,GAAGD,IAAd,CAF6B,CAI7B;;IACAC,OAAO,IAAIH,UAAX;;IAEA,IAAIG,OAAO,GAAG,CAAd,EAAiB;MACfA,OAAO,IAAI,EAAX;IACD,CAFD,MAEO,IAAIA,OAAO,KAAK,CAAhB,EAAmB;MACxBA,OAAO,GAAG,EAAV;IACD,CAFM,MAEA,IAAIA,OAAO,GAAG,EAAd,EAAkB;MACvBA,OAAO,IAAI,EAAX;IACD;;IAED,OAAOA,OAAP;EACD,CAhBD;;EAkBA,MAAMC,QAAQ,GAAG;IACfC,OAAO,EAAEJ,KAAK,CAACX,UAAU,CAACJ,UAAD,CAAX,CADC;IAEfoB,MAAM,EAAEL,KAAK,CAACX,UAAU,CAACH,SAAD,CAAX,CAFE;IAGfoB,OAAO,EAAEjB,UAAU,CAACD,OAAO,GAAGD,QAAX;EAHJ,CAAjB;;EAMA,IAAKgB,QAAQ,CAACE,MAAT,GAAkBF,QAAQ,CAACG,OAA5B,KAA0CH,QAAQ,CAACG,OAAT,IAAoBH,QAAQ,CAACC,OAA3E,EAAqF;IACnF,OAAO,EACL,GAAGD,QADE;MAELI,UAAU,EAAE;IAFP,CAAP;EAID,CALD,MAKO;IACL,OAAO,EACL,GAAGJ,QADE;MAELI,UAAU,EAAE;IAFP,CAAP;EAID;AAEF;;AAED,SAASvB,aAAT"},"metadata":{},"sourceType":"module"}