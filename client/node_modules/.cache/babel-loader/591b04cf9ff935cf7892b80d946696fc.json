{"ast":null,"code":"var _jsxFileName = \"/Users/gregory/Desktop/untitled folder 2/wwww/weather/client/src/components/NavTabs/Links.tsx\",\n    _s = $RefreshSig$();\n\nimport s from \"./navtabs.module.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport { routes } from \"../../routes\";\nimport { useAppSelector } from \"src/hooks/redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Links(_ref) {\n  _s();\n\n  let {\n    days\n  } = _ref;\n  const city = useAppSelector(state => state.fiveDaysWeatherReducer.main.city.name);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: Object.keys(days).map((item, index) => /*#__PURE__*/_jsxDEV(NavLink, {\n      id: `${index}`,\n      className: `${s.tabs} ${s.tabs}_${index}`,\n      to: findRoute(item),\n      children: days[item]\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this))\n  }, void 0, false);\n\n  function findRoute(item) {\n    if (item === routes.weather) {\n      return `${routes[item]}/${city}`;\n    } else {\n      return `${routes[item]}`;\n    }\n\n    ;\n  }\n\n  ;\n}\n\n_s(Links, \"kYn4xrH2pV+OgTB+myLiKN0PypM=\", false, function () {\n  return [useAppSelector];\n});\n\n_c = Links;\n;\nexport default Links;\n\nvar _c;\n\n$RefreshReg$(_c, \"Links\");","map":{"version":3,"names":["s","NavLink","routes","useAppSelector","Links","days","city","state","fiveDaysWeatherReducer","main","name","Object","keys","map","item","index","tabs","findRoute","weather"],"sources":["/Users/gregory/Desktop/untitled folder 2/wwww/weather/client/src/components/NavTabs/Links.tsx"],"sourcesContent":["import s from \"./navtabs.module.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport { routes } from \"../../routes\";\nimport { useAppSelector } from \"src/hooks/redux\";\n\ntype Props = {\n  days: {\n    weather: string,\n    blog: string\n  }\n};\n\nfunction Links ({days}: Props): JSX.Element {\n\n  const city = useAppSelector(state => state.fiveDaysWeatherReducer.main.city.name);\n\n  type Days = typeof days;\n  type Keys = keyof Days;\n\n  return <>\n  {\n    (Object.keys(days) as Keys[]).map((item, index) =>\n      <NavLink\n        id={`${index}`}\n        key={index}\n        className={`${s.tabs} ${s.tabs}_${index}`}\n        to={findRoute(item)}\n      >\n        {days[item]}\n      </NavLink>\n    )\n  }\n  </>;\n\n  function findRoute(item: Keys) {\n    if (item === routes.weather) {\n      return `${routes[item]}/${city}`;\n    } else {\n      return `${routes[item]}`;\n    };\n  };\n};\n\n\nexport default Links;"],"mappings":";;;AAAA,OAAOA,CAAP,MAAc,uBAAd;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,cAAT,QAA+B,iBAA/B;;;;AASA,SAASC,KAAT,OAA4C;EAAA;;EAAA,IAA5B;IAACC;EAAD,CAA4B;EAE1C,MAAMC,IAAI,GAAGH,cAAc,CAACI,KAAK,IAAIA,KAAK,CAACC,sBAAN,CAA6BC,IAA7B,CAAkCH,IAAlC,CAAuCI,IAAjD,CAA3B;EAKA,oBAAO;IAAA,UAEJC,MAAM,CAACC,IAAP,CAAYP,IAAZ,CAAD,CAA8BQ,GAA9B,CAAkC,CAACC,IAAD,EAAOC,KAAP,kBAChC,QAAC,OAAD;MACE,EAAE,EAAG,GAAEA,KAAM,EADf;MAGE,SAAS,EAAG,GAAEf,CAAC,CAACgB,IAAK,IAAGhB,CAAC,CAACgB,IAAK,IAAGD,KAAM,EAH1C;MAIE,EAAE,EAAEE,SAAS,CAACH,IAAD,CAJf;MAAA,UAMGT,IAAI,CAACS,IAAD;IANP,GAEOC,KAFP;MAAA;MAAA;MAAA;IAAA,QADF;EAFK,iBAAP;;EAeA,SAASE,SAAT,CAAmBH,IAAnB,EAA+B;IAC7B,IAAIA,IAAI,KAAKZ,MAAM,CAACgB,OAApB,EAA6B;MAC3B,OAAQ,GAAEhB,MAAM,CAACY,IAAD,CAAO,IAAGR,IAAK,EAA/B;IACD,CAFD,MAEO;MACL,OAAQ,GAAEJ,MAAM,CAACY,IAAD,CAAO,EAAvB;IACD;;IAAA;EACF;;EAAA;AACF;;GA7BQV,K;UAEMD,c;;;KAFNC,K;AA6BR;AAGD,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}