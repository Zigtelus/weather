{"ast":null,"code":"var _jsxFileName = \"/Users/gregory/Desktop/untitled folder 2/wwww/weather/client/src/components/Pages/Today/NowtimeWeather/index.tsx\",\n    _s = $RefreshSig$();\n\n// styles\nimport './index.scss'; // modules\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom'; // hooks\n\nimport { useAppDispatch, useAppSelector } from \"../../../../hooks/redux\";\nimport { dataUser } from '../../../../store/weather/createApi'; // slices\n\nimport { addText } from '../../../../store/pushMessage/pushMessage.slice';\n// actions\nimport { fiveDaysAction } from '../../../../store/weather/actions/fiveDays.action';\nimport { nowtimeAction } from '../../../../store/weather/actions/nowtime.action'; // helpers\n\nimport { sunriseSunset } from '../../../../helpers/sunriseSunset';\nimport LoadingAnimation from '../../../../helpers/LoadingAnimation'; // components\n\nimport Temperature from './Temperature';\nimport ExtraOptions from '../ExtraOptions';\nimport PictureWeatherNow from './PictureWeatherNow';\nimport Pop from '../Pop';\nimport Wind from '../Wind';\nimport ItemsDay from '../ItemsDay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction NowtimeWeather() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    !!id && (dataUser.main = id);\n  }, [id]);\n  const nowtimeWeather = useAppSelector(state => state.nowtimeWeatherReducer);\n  const fiveDaysWeather = useAppSelector(state => state.fiveDaysWeatherReducer);\n  const listFiveDays = fiveDaysWeather.main.list; // const [statusPushMessage, setStatusPushMessage] = useState(false);\n\n  const isLoading = fiveDaysWeather.loading;\n  const errorConnect = fiveDaysWeather.errorConnect;\n  const city = fiveDaysWeather.main.city;\n  const weatherNow = fiveDaysWeather.main.list[0];\n  const times = sunriseSunset(city.sunrise, city.sunset, city.timezone, weatherNow.dt);\n  const addNight = times.timesOfDay === 'light';\n  const [country, setCountry] = useState(0);\n  const dispatch = useAppDispatch();\n\n  const thisError = error => {\n    console.log('error thisError'); // при первом подключении по default ссылке\n\n    if (!id && typeof errorConnect === \"undefined\") {\n      thisPosition({\n        coords: {\n          latitude: 38.895,\n          longitude: -77.0366\n        }\n      });\n      dispatch(addText.addText('You don`t have GPS enabled, so we`ve displayed weather data for Washington DC.'));\n    } else {\n      thisPosition(); // в случае переподключения\n\n      let numberRequest = 1;\n\n      if (!!errorConnect) {\n        numberRequest = Number(errorConnect.split(\" \")[1]);\n      }\n\n      ;\n      dispatch(addText.addText('Пытаемся переподключиться к серверу погоды'));\n    }\n  };\n\n  useEffect(() => {\n    if (errorConnect !== \"\") {\n      console.log('useEffect true', errorConnect);\n      navigator.geolocation.getCurrentPosition(thisPosition, thisError);\n    } else {\n      console.log('useEffect false', errorConnect);\n    }\n  }, [id, errorConnect]);\n  console.log('gtssss', fiveDaysWeather);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"main weather_main\",\n    children: checkLoading() || checkErrorConnect() || /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `weather_main__top \n              ${addNight ? 'weather_main__top--day' : 'weather_main__top--night'}\n            `,\n        children: [/*#__PURE__*/_jsxDEV(Temperature, {\n          nowtimeWeather: nowtimeWeather.main,\n          fiveDaysWeather: fiveDaysWeather.main\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(PictureWeatherNow, {\n          weatherNow: weatherNow,\n          city: city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather_main__top__bg\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"weather_main__top__bg__body\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          display: \"none\"\n        },\n        children: [\"\\u0432\\u0438\\u0434\\u0438\\u043C\\u043E\\u0441\\u0442\\u044C:\", nowtimeWeather.main.visibility > 1000 && nowtimeWeather.main.visibility / 1000, nowtimeWeather.main.visibility > 1000 ? 'км' : 'метров']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"sunrise \", times.sunrise, \" - sunset \", times.sunset]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ItemsDay, {\n          fiveDaysWeather: fiveDaysWeather.main\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"weather_main__name_station\",\n        children: [\"The nearest weather station is in \\\"\", nowtimeWeather.main.name, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ExtraOptions, {\n        humidity: nowtimeWeather.main.main.humidity,\n        pressure: nowtimeWeather.main.main.pressure,\n        visibility: nowtimeWeather.main.visibility\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Pop, {\n        list: listFiveDays\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Wind, {\n        list: fiveDaysWeather.main.list\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n\n  function thisPosition(position) {\n    console.log('position', position);\n\n    if (!!position) {\n      dataUser.lat = position.coords.latitude;\n      dataUser.lon = position.coords.longitude;\n    }\n\n    setCountry(country + 1);\n    dispatch(nowtimeAction());\n    dispatch(fiveDaysAction()); // await dispatch(nowtimeAction());\n    // await dispatch(fiveDaysAction());\n    // dispatch(getUsersActions());\n    // setStatusPushMessage(false);\n  }\n\n  ;\n\n  function checkLoading() {\n    return isLoading && /*#__PURE__*/_jsxDEV(LoadingAnimation, {\n      userLoading: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 25\n    }, this);\n  }\n\n  ;\n\n  function checkErrorConnect() {\n    if (errorConnect === 'Network Error') {\n      return 'нет связи с сервером погоды';\n    } else if (errorConnect === '') {\n      return false;\n    } else {\n      return true;\n    }\n\n    ;\n  }\n\n  ;\n}\n\n_s(NowtimeWeather, \"8W0c0HbuO2y4ju+7rHM9375qhqY=\", false, function () {\n  return [useParams, useAppSelector, useAppSelector, useAppDispatch];\n});\n\n_c = NowtimeWeather;\n;\nexport default NowtimeWeather;\n\nvar _c;\n\n$RefreshReg$(_c, \"NowtimeWeather\");","map":{"version":3,"names":["useEffect","useState","useParams","useAppDispatch","useAppSelector","dataUser","addText","fiveDaysAction","nowtimeAction","sunriseSunset","LoadingAnimation","Temperature","ExtraOptions","PictureWeatherNow","Pop","Wind","ItemsDay","NowtimeWeather","id","main","nowtimeWeather","state","nowtimeWeatherReducer","fiveDaysWeather","fiveDaysWeatherReducer","listFiveDays","list","isLoading","loading","errorConnect","city","weatherNow","times","sunrise","sunset","timezone","dt","addNight","timesOfDay","country","setCountry","dispatch","thisError","error","console","log","thisPosition","coords","latitude","longitude","numberRequest","Number","split","navigator","geolocation","getCurrentPosition","checkLoading","checkErrorConnect","display","visibility","width","name","humidity","pressure","position","lat","lon"],"sources":["/Users/gregory/Desktop/untitled folder 2/wwww/weather/client/src/components/Pages/Today/NowtimeWeather/index.tsx"],"sourcesContent":["// styles\nimport './index.scss';\n\n// modules\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\n// hooks\nimport { useAppDispatch, useAppSelector } from \"../../../../hooks/redux\";\nimport { dataUser } from '../../../../store/weather/createApi';\n\n// slices\nimport { addText } from '../../../../store/pushMessage/pushMessage.slice';\nimport { getLoading } from '../../../../store/weather/slices/fiveDays.slice';\n\n// actions\nimport { fiveDaysAction } from '../../../../store/weather/actions/fiveDays.action';\nimport { nowtimeAction } from '../../../../store/weather/actions/nowtime.action';\n\n// helpers\nimport { sunriseSunset } from '../../../../helpers/sunriseSunset';\nimport LoadingAnimation from '../../../../helpers/LoadingAnimation';\n\n// components\nimport Temperature from './Temperature';\nimport ExtraOptions from '../ExtraOptions';\nimport PictureWeatherNow from './PictureWeatherNow';\nimport Pop from '../Pop';\nimport Wind from '../Wind';\nimport ItemsDay from '../ItemsDay';\n\ntype Coords = {\n  coords: {\n    latitude: number,\n    longitude: number\n  };\n};\n\nfunction NowtimeWeather(): JSX.Element {\n\n  const {id} = useParams();\n  useEffect(()=> {\n    !!id && (dataUser.main = id)\n  }, [id]);\n\n  const nowtimeWeather  = useAppSelector(state=> state.nowtimeWeatherReducer);\n  const fiveDaysWeather = useAppSelector(state=> state.fiveDaysWeatherReducer);\n\n  const listFiveDays = fiveDaysWeather.main.list;\n  // const [statusPushMessage, setStatusPushMessage] = useState(false);\n  const isLoading    = fiveDaysWeather.loading;\n  const errorConnect = fiveDaysWeather.errorConnect;\n  const city         = fiveDaysWeather.main.city;\n  const weatherNow   = fiveDaysWeather.main.list[0];\n\n  const times = sunriseSunset(city.sunrise, city.sunset, city.timezone, weatherNow.dt);\n  const addNight = times.timesOfDay === 'light';\n\n  const [country, setCountry] = useState<number>(0);\n  const dispatch = useAppDispatch();\n\n  type Error = { code: number, message: string };  \n  const thisError = (error?: Error)=> {\n\n    console.log('error thisError')\n    // при первом подключении по default ссылке\n    if (!id && typeof errorConnect === \"undefined\") {\n      thisPosition({coords: {latitude: 38.895, longitude: -77.0366}});\n      dispatch(addText.addText('You don`t have GPS enabled, so we`ve displayed weather data for Washington DC.'))\n    } else {\n      thisPosition();\n\n      // в случае переподключения\n      let numberRequest = 1;\n      if (!!errorConnect) {\n        numberRequest = Number(errorConnect.split(\" \")[1]);\n      };\n\n\n      dispatch(addText.addText('Пытаемся переподключиться к серверу погоды'))\n    }\n\n  };\n\n\n\n  useEffect(()=> {\n    if (errorConnect !== \"\") {\n      console.log('useEffect true', errorConnect)\n      navigator.geolocation.getCurrentPosition(thisPosition, thisError);\n    } else {\n      console.log('useEffect false', errorConnect)\n    }\n  }, [id, errorConnect]);\n\n\n  console.log('gtssss', fiveDaysWeather)\n  return (\n    <main className=\"main weather_main\">\n    {  \n        (\n          checkLoading() ||\n          checkErrorConnect() ||\n          <>\n            <div className={`weather_main__top \n              ${\n                addNight ? \n                'weather_main__top--day' :  \n                'weather_main__top--night'\n              }\n            `}>\n              <Temperature\n                nowtimeWeather={nowtimeWeather.main}\n                fiveDaysWeather={fiveDaysWeather.main}\n              />\n\n              <PictureWeatherNow\n                weatherNow={weatherNow}\n                city={city}\n              />\n\n              <div className=\"weather_main__top__bg\">\n                <div className=\"weather_main__top__bg__body\"></div>\n              </div>\n\n            </div>\n\n\n            <span style={{display:\"none\"}}>видимость: \n              {nowtimeWeather.main.visibility > 1000 && nowtimeWeather.main.visibility / 1000} \n              {nowtimeWeather.main.visibility > 1000 ? 'км' : 'метров'}\n            </span>\n            \n            <div>\n              sunrise {times.sunrise} - sunset {times.sunset}\n            </div>\n            \n            <div style={{width:\"100%\"}}>\n              <ItemsDay fiveDaysWeather={fiveDaysWeather.main}/>\n            </div>\n\n            {/* <PictureWeatherSmall\n              weatherNow={item}\n              city={fiveDaysWeather.city}\n            /> */}\n\n            <span className=\"weather_main__name_station\">\n              The nearest weather station is in \"{nowtimeWeather.main.name}\"\n            </span>\n\n            <ExtraOptions \n              humidity={nowtimeWeather.main.main.humidity}\n              pressure={nowtimeWeather.main.main.pressure}\n              visibility={nowtimeWeather.main.visibility}\n            />\n\n            <Pop list={listFiveDays}/>\n\n            <Wind list={fiveDaysWeather.main.list}/>\n            \n            {/* {\n              statusPushMessage &&\n              (\n                !!id || \n                <PushMeassage \n                  isClassName={'push_message__no_gps'} \n                  text={'У вас не включен GPS, поэтому мы вывели данные по погоде в Москве'}\n                />\n              )\n            } */}\n          </>\n        )\n      }\n    </main>\n  );\n\n  function thisPosition (position?: Coords ) {\n    console.log('position', position)\n\n    if (!!position) {\n      dataUser.lat = position.coords.latitude;\n      dataUser.lon = position.coords.longitude;\n    }\n    setCountry(country+1);\n    dispatch(nowtimeAction());\n    dispatch(fiveDaysAction());\n    // await dispatch(nowtimeAction());\n    // await dispatch(fiveDaysAction());\n    // dispatch(getUsersActions());\n    // setStatusPushMessage(false);\n  };\n\n  function checkLoading() {\n    return isLoading && <LoadingAnimation userLoading={isLoading} />\n  };\n\n  function checkErrorConnect() {\n    if (errorConnect === 'Network Error') {\n      return 'нет связи с сервером погоды';\n    } else if (errorConnect === '') {\n      return false;\n    } else {\n      return true;\n    };\n  };\n};\n\nexport default NowtimeWeather;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}